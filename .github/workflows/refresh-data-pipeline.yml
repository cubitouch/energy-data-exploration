name: Refresh Data Pipeline

on:
  workflow_dispatch:

jobs:
  ingest-data:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Trigger ingestion Lambda
        run: |
          RESPONSE=$(aws lambda invoke \
            --function-name energy-market-france-ingestion \
            --region eu-north-1 \
            output.json)
          echo "Lambda Response: $RESPONSE"
          cat output.json

      - name: Monitor upsert Lambda logs for completion
        run: |
          LOG_GROUP_NAME="/aws/lambda/energy-market-france-upsert"
          START_TIME=$(date +%s000)  # Current time in milliseconds
          echo "Monitoring logs from $LOG_GROUP_NAME starting at $START_TIME..."

          COMPLETION_MESSAGE="Pipeline ran successfully!"  # Define the message that indicates completion
          TIMEOUT=900  # Timeout in seconds (15 minutes)
          POLL_INTERVAL=30  # Poll every 30 seconds

          while true; do
            CURRENT_TIME=$(date +%s000)
            LOGS=$(aws logs filter-log-events \
              --log-group-name $LOG_GROUP_NAME \
              --start-time $START_TIME \
              --query "events[?contains(message, 'Pipeline ran successfully!')].message" \
              --region eu-north-1 \
              --output text)

            if [[ -n "$LOGS" ]]; then
              echo "Upsert Lambda completed successfully."
              break
            fi

            ELAPSED=$((CURRENT_TIME / 1000 - START_TIME / 1000))
            if [[ $ELAPSED -ge $TIMEOUT ]]; then
              echo "Timeout reached while waiting for upsert Lambda to complete."
              exit 1
            fi

            echo "Waiting for upsert Lambda to complete..."
            sleep $POLL_INTERVAL
          done

  dbt-run:
    runs-on: ubuntu-latest
    needs: ingest-data
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dbt Core
        run: |
          pip install dbt-core dbt-postgres # Adjust dbt adapter if needed
          dbt --version

      - name: Set up dbt profiles
        run: |
          mkdir -p ~/.dbt
          echo "$DBT_PROFILES_YML" > ~/.dbt/profiles.yml
        env:
          DBT_PROFILES_YML: ${{ secrets.DBT_PROFILES_YML }}

      - name: Run dbt commands
        run: |
          cd analytics
          dbt deps
          dbt run --profiles-dir ~/.dbt
          dbt test --profiles-dir ~/.dbt

  deploy-vercel:
    runs-on: ubuntu-latest
    needs: dbt-run
    steps:
      - name: Redeploy on Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          # Fetch the latest deployment
          PROJECT_ID="energy-data-exploration"
          DEPLOYMENTS=$(curl -X GET "https://api.vercel.com/v6/deployments?app=$PROJECT_ID" \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            -H "Content-Type: application/json")

          echo "Deployments: $DEPLOYMENTS"

          DEPLOYMENT_ID=$(echo "$DEPLOYMENTS" | jq -r '.deployments[0].uid')
          if [[ -z "$DEPLOYMENT_ID" ]]; then
            echo "Failed to fetch the latest deployment ID."
            exit 1
          fi

          echo "Latest Deployment ID: $DEPLOYMENT_ID"

          # Trigger the redeploy
          npm i -g vercel
          vercel redeploy $DEPLOYMENT_ID --token $VERCEL_TOKEN --scope hugo-carnicellis-projects
